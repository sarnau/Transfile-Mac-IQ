/*** *	GlobalStruct.h * *	globale Datenstruktur ***/#pragma once/*** *	Dateitypen, welche die Sharp IQ-Serie kennt ***/typedef enum {	UNKNOWNFILE = 0,// Freieintrag unbekannter Herkunft	SCHEDULE,		// normaler Termin	ANN1,			// JŠhrlicher Termin (Geburtstag)	ANN2,			// JŠhrlicher Termin (Muttertag)	PERIOD,			// lŠngerer Termin (Urlaub)	DALARM,			// tŠglicher Termin	TEL1DATA,		// Telefoneintrag 1	TEL2DATA,		// Telefoneintrag 2	TEL3DATA,		// Telefoneintrag 3	TEL1FILE,		// Filenamen der 3 TelefoneintrŠge zu 1	TEL2FILE,		// Filenamen der 3 TelefoneintrŠge zu 2	TEL3FILE,		// Filenamen der 3 TelefoneintrŠge zu 3	TEL1FREE,		// Namen der freien Telefonfelder zu 1	TEL2FREE,		// Namen der freien Telefonfelder zu 2	TEL3FREE,		// Namen der freien Telefonfelder zu 3	MEMO,			// einfaches Memo	OUTLINE,		// Outliner	BUSINESS,		// Visitenkarte	BUSFREE,		// Namen der freien Visitenkartenfelder	USERDIC,		// Stichworte	DOLIST,			// ÒDo ListÓ Modul	EXPENSE,		// ÒExpenseÓ Modul	TIME,			// ÒTime AccountingÒ Modul	TODO,			// ÒTo DoÓ Modul	USERFILE1,		// Userfiles	USERFILE2,	USERFILE3,	USER1FREE,		// Userfiles Filenamen	USER2FREE,	USER3FREE,	MaxIQFileType	// maximaler Index +1} IQFileType;/*** *	Union mit allen Strukturen, die Zeiten o.Š. zu IQ-Files beinhalten ***/typedef union {	struct {					// Format fŸr allgemeinen Termin		WORD		year;		// Datum		BYTE		month;		BYTE		day;		BYTE		shour;		// Startzeit		BYTE		sminute;		BYTE		ehour;		// Endzeit		BYTE		eminute;		BYTE		ahour;		// Alarmzeit		BYTE		aminute;	} schedule;	struct {					// Format fŸr jŠhrlichen Termin (Geburtstag)		BYTE		month;		BYTE		date;	} ann1;	struct {					// Format fŸr jŠhrlichen Termin (Muttertag)		BYTE		month;		BYTE		week;		// 1É5		BYTE		day;		// 0 = Sonntag, É, 6 = Samstag	} ann2;	struct {					// Format von periodischen Termin (Urlaub)		WORD		syear;		// Startdatum		BYTE		smonth;		BYTE		sday;		WORD		eyear;		// Enddatum		BYTE		emonth;		BYTE		eday;	} psched;	struct {					// Format fŸr den tŠglichen Alarm		BYTE		hour;		BYTE		minute;	} dalarm;	struct {					// Format fŸr ÒTo DoÓ List		WORD		year;		// Datum		BYTE		month;		BYTE		day;		WORD		prio;		// PrioritŠt (0-9, A-Z, Space und 0xC5 (SHARP!) = Check Mark)	} todo;	struct {					// Format fŸr ÒExpenseÓ Manager		WORD		year;		// Datum		BYTE		month;		BYTE		day;	} expense;} IQTime;/*** *	Listenstruktur fŸr alles IQ-Files ***/typedef struct	List {	struct List	**next,**prev;	// Verkettung fŸr die Elemente der Liste	IQFileType	type;			// was fŸr ein Eintrag	struct {	unsigned	selected:1;		// Eintrag selektiert	unsigned	found:1;		// Eintrag beim Suchen gefunden	unsigned	marked:1;		// Eintrag markiert, d.h. geschŸtzt	unsigned	alarm:1;		// Eintrag mit Alarm behaftet	unsigned	displaymode:1;	// 0 = 8 Zeilen, 1 = 4 Zeilen	} b;	IQTime		t;				// Datum, Uhrzeit, etc.	char		d[1];			// Daten des Eintrags (+ Nullbyte)} List,*ListP,**ListH;/*** *	Infos zum aktuellen Organizer ***/// Rechnertypenum {	ZQ5000 = 1,	IQ7000 = 2,	IQ8000 = 4,	IQ7600 = 8,	IQ8400 = 16};#define IQALL		(ZQ5000|IQ7000|IQ8000|IQ7600|IQ8400)#define	IQ8x00		(IQ8000|IQ8400)#define	RAMCARD		0x100		// Bit fŸr Ramkarte#define TIMEEXPCARD	0x200		// Time-Expense-Manager-Karte#define SPREATSHEET	0x400		// Spreatsheet-Karte#define ALLCARDS	(RAMCARD|TIMEEXPCARD|SPREATSHEET)#define IQ7000CARD	(IQ7000|RAMCARD)#define IQ7600CARD	(IQ7600|RAMCARD)#define IQ8000CARD	(IQ8000|RAMCARD)#define IQ8400CARD	(IQ8400|RAMCARD)// eingestellte Sprache im Rechnerenum {	UNKNOWNLANG,	ENGLISH,	GERMAN,	FRENCH,	ITALIAN,	SPANISH,	SWEDISH,	FINNISH};typedef	struct	Organizer {	WORD		type;			// Rechnertyp bzw. Ramkarte	BYTE		width;			// Breite des Displays (z.B. 40)	BYTE		height;			// Hšhe des Displays (z.B. 8)	BYTE		language;		// Sprache	WORD		stadt;			// Stadt fŸr das Senden der Uhrzeit	Boolean		DataMode;		// false: MM/DD/YYYY, true: DD/MM/YYYY	Boolean		TimeMode;		// false: 24h, true: 12h	Boolean		CalendarMode;	// false: SUM->SAT, true: MON->SUN	Handle		dir;			// Handle auf das Directory	ListH		schedule;	ListH		ann1;	ListH		ann2;	ListH		period;	ListH		dalarm;	ListH		teldata;	ListH		telfile;	ListH		telfree;		// Handles auf alle List-Strukturen	ListH		memo;	ListH		outline;	ListH		business;	ListH		busfree;	ListH		userdic;	ListH		dolist;	ListH		expense;	ListH		time;	ListH		todo;	ListH		userfiles;	ListH		userfree;	ListH		dummy2;	ListH		dummy3;	ListH		dummy4;	ListH		dummy5;	ListH		dummy6;	ListH		dummy7;	ListH		dummy8;	ListH		dummy9;	ListH		dummy10;	ListH		Null;			// Null-Handle als Endekennung} Organizer,*OrganizerP,**OrganizerH;#define	ORG		(**(OrganizerH)(**gDoc).data)