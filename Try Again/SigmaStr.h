/*** *	ANSI-str.c/str.h Library * *	Diese Library enthält (fast) alle (Ausnahme: s.u.) ANSI-Stringfunktionen als Inline- *	Code, d.h. wenn man folgendes schreibt: * *		strcpy(dest,source); * *	Wird folgendes erzeugt: * *		lea		source,a0		;diese und die folgende Zeile kann ggf. anders aussehen *		lea		dest,a1 *		move.l	a0,d0			;dies ist für den ANSI-Standard nötig, auch wenn man *								;selbst nie einen Rückgabewert verwendet. Wer es NIE *								;verwendet, kann ggf. das Word 0x2008 in strcpy() *								;entfernen. Spart Platz und Code… *		move.b	(a0)+,(a1)+ *		bne.s	*-2 * *	Vorteil dieser Library: extrem kurze String-Funktione (strlen, strcpy) sparen Platz, *	da selbst der Unterprogrammaufruf mehr Code kostet, als die gesamte “Routine”. *	Nebenbei wird´s auch noch schneller. Längere Funktionen sind auch dann noch sinnvoll, *	wenn man sie nur einmal verwendet. Die ANSI-Library ist ebenfalls unnötig. * *	Diese Library funktioniert NUR unter Think C 5.0 und (wahrscheinlich) MPW C (konnte *	ich nicht ausprobieren) * *	Lediglich die Funktion “strtok” fehlt. Diese Funktion ist zum Einen relativ lang, zum *	anderen wird eine statische Variable benötigt, welche man besser nicht mit Inline- *	Code simuliert. * *	©1991 ∑-Soft, Markus Fritze ***/#pragma	once#include <size_t.h>#pragma parameter __D0 Strlen(__A0)size_t	Strlen(const char *s) = { 0x70FF,0x5280,0x4A18,0x66FA };#pragma parameter __D0 Strcpy(__A1,__A0)char	*Strcpy(char *d,const char *s) = { 0x2008,0x12D8,0x66FC };#pragma parameter vStrcpy(__A1,__A0)void	vStrcpy(char *d,const char *s) = { 0x12D8,0x66FC };#pragma parameter __D0 Strcat(__A0,__A1)char	*Strcat(char *d,const char *s) = { 0x2008,0x4A18,0x66FC,0x5388,0x10D9,0x66FC };#pragma parameter __D0 Strcmp(__A1,__A0)long	Strcmp(const char *s1,const char *s2) = { 0x7000,0x6004,0x4A01,0x670C,0x1218,0xB219,0x67F6,0x6202,0x5580,0x5280 };#pragma parameter __D0 Strchr(__A0,__D1)char	*Strchr(const char *s,int c) = { 0x7000,0x6004,0x4A18,0x6706,0xB210,0x66F8,0x2008 };#pragma parameter __D0 Strrchr(__A0,__D1)char	*Strrchr(const char *s,int c) = { 0x7000,0xB210,0x6602,0x2008,0x4A18,0x66F6 };#pragma parameter __D0 Strcspn(__A0,__A1)size_t	Strcspn(const char *s1,const char *s2) = { 0x70FF,0x5280,0x1218,0x670A,0x2449,0x141A,0x67F4,0xB401,0x66F8 };#pragma parameter __D0 Strpbrk(__A0,__A1)char	*Strpbrk(const char *s1,const char *s2) = { 0x7000,0x1218,0x670E,0x2449,0x141A,0x67F6,0xB401,0x66F8,0x5388,0x2008 };#pragma parameter __D0 Strspn(__A0,__A1)size_t	Strspn(const char *s1,const char *s2) = { 0x7000,0x6006,0xB401,0x6608,0x5280,0x1218,0x6706,0x2449,0x141A,0x66F0 };#pragma parameter __D0 Strstr(__D0,__A1)char	*Strstr(const char *s1,const char *s2) = { 0x6006,0xB401,0x6706,0x5280,0x2040,0x2449,0x121A,0x6706,0x1418,0x66EE,0x7000 };