/*** *	Library für Dialoge ***/extern WORD		gTEMaxLen;		// maximale Länge für den TextEdit-Filterextern LONG			mWmax;			// maximaler Wert (für Skalierung)extern LONG			mWakt;			// aktueller Wertextern WindowPtr	gBehind;		// Dialog VOR oder HINTER den Windows öffnen/*** *	eigene interne Listen-Struktur ***/typedef enum {	list,			// List Manager	popup			// Popup-Menü} OwnObjectTypes;typedef struct OwnObjectStruct **OwnObjectH;typedef struct OwnObjectStruct {	struct OwnObjectStruct	**next;			// Folgeeintrag in der Liste	OwnObjectTypes			type;			// Typ des Eintrags	WORD					item;			// dazugehöriges Item	LONG					refCon;			// eigenes RefCon-Feld für jedes Item	VOID					(*draw)(OwnObjectH,DialogPtr);	// Objekt zeichnen	WORD					(*klick)(OwnObjectH,DialogPtr,Point,WORD,WORD*);// Objekt angeklickt	ProcPtr					key;						// Taste gedrückt	VOID					(*dispose)(OwnObjectH);			// Objekt freigeben} OwnObjectStruct,*OwnObjectP,**OwnObjectH;typedef struct {	WORD	txFont;		// Font-ID	WORD	txMode;		// Transfer-Modus	WORD	txSize;		// Text-Größe	Style	txFace;		// Text-Stil} FontStruct;EXTERN FontStruct	fDefault;VOID			SaveText(REG FontStruct *f);VOID			RestoreText(REG FontStruct *f);VOID			RedrawItem(DialogPtr d,WORD item);VOID			SetDialogText(DialogPtr d,WORD item,USTR s);VOID			GetDialogText(DialogPtr d,WORD item,USTR s);VOID			SetUserItem(DialogPtr d,WORD item,void *routine);VOID			PushRadioButton(DialogPtr d,WORD item,WORD first,WORD last);VOID			ToggleButton(DialogPtr d,WORD item);VOID			HiliteButton(DialogPtr d,WORD item,WORD flag);WORD			GetButton(DialogPtr d,WORD item);VOID			SetButton(DialogPtr d,WORD item,WORD flag);VOID			SetInteger(DialogPtr d,WORD object,WORD count);WORD			GetInteger(DialogPtr d,WORD object);ControlHandle	GetCH(DialogPtr d,WORD item);VOID			OutlineControl(ControlHandle button);VOID			OutlineDialogItem(DialogPtr d,WORD item);VOID			SelectControl(ControlHandle button);WORD			DoAlert(WORD id);WORD			DoDialog(WORD dlog,WORD savebut);pascal Boolean	OwnTELenFilter(DialogPtr d,EventRecord *event, WORD *item);pascal Boolean	OwnDialogFilter(DialogPtr d,EventRecord *event, WORD *item);DialogPtr		GetCenteredDialog(WORD id,DialogPtr storage);VOID			PositionDialog(ResType theType,WORD theID);VOID			FindDlogPosition(ResType theType,WORD theID,Point *corner);VOID			PositionRectInRect(Rect outerRect,Rect *innerRect,Fixed horzRatio,Fixed vertRatio);OwnObjectH		NewObject(DialogPtr d,WORD item,WORD type,LONG refcon);pascal VOID		DrawObject(REG DialogPtr d,WORD item);VOID			DisposeObjects(DialogPtr d);VOID			DisposeObject(DialogPtr d,WORD item);VOID			NewPopup(REG DialogPtr d,REG WORD item,WORD menuId,WORD textId,WORD index);WORD			GetPopupValue(DialogPtr d,WORD item);VOID			SetPopupValue(DialogPtr d,WORD item,WORD value);VOID			GetPopupItem(DialogPtr d,WORD item,WORD index,Str255 s);ListHandle		NewList(DialogPtr d,WORD item,Boolean VSlider,Boolean HSlider,WORD proc);WORD			AddListMgr(char *s,ListHandle l);WORD			SortToListMgr(REG STR s,REG ListHandle l);WORD			FindSelCell(ListHandle l);WORD			MyAppendDITL(DialogPtr theDialog,WORD theDITLID);VOID			Append2hdlg(WORD srcResID,WORD dstResID);pascal VOID		mWindowDraw(DialogPtr d,WORD item);VOID			mWindowUpdate(LONG curI);typedef struct popupPrivateData {		MenuHandle	mHandle;		WORD		mID;		char		mPrivate[];	} popupPrivateData,*popupPrivateDataP,**popupPrivateDataH;#define kButtonFrameSize		3			// button frame’s pen size#define kButtonFrameInset		(-4)		// inset rectangle adjustment around button#define kControlInvisible		0#define kControlVisible			0xFF#define kCntlActive				0			// enabled control’s hilite state#define kCntlInactive			0xFF		// disabled control’s hilite state#define kCntlOn					1			// control’s value when truned on#define kCntlOff				0			// control’s value when truned off#define kSelect					1			// select the control#define kDeselect				0			// deselect the control#define kDelayTime				8			/* For the delay time when flashing the											   menubar and highlighting a button.											   8/60ths of a second */