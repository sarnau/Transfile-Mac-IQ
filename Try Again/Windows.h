#pragma once	// include this header				// only once per source file#include "Document.h"#ifndef OFFSET#define OFFSET(type, field)		((int) &((type *) 0)->field)#endif#define	WINDMAGIC	'·WIN'			// Magic-ID um ein _eigenes_ Window zu erkennentypedef struct WindStruct {	struct DialogRecord	wmacwind;	// zugehšriges Window	struct DocStruct	**Doc;		// Handle auf den zum Window gehšrenden Dokument	LONG				magic;		// ID, um eigene Windows zu erkennen	ProcPtr				close;		// Window wird geschlossen	ProcPtr				activ;		// Window wurde aktiviert	ProcPtr				deactiv;	// Window wurde deaktiviert	ProcPtr				adjust;		// Window wurde in der Grš§e bzw. per Slider verŠndert	ProcPtr				klick;		// fŸr Mausklicks	ProcPtr				key;		// Tastendruck	ProcPtr				draw;		// zum Zeichnen	ProcPtr				idle;		// Time-Events	ProcPtr				menuupdate;	// MenŸpunkte en- bzw. disablen	ProcPtr				button;		// Button wurde im Dialog angeklickt	ProcPtr				rename;		// Dokument wurde evtl. umbenannt, ggf. Windowtitel anpassen	ProcPtr				help;		// Help-ID zurŸckgeben Ÿber dem der Mauszeiger steht	long				DialogRefcon;	// Liste fŸr den Dialog-Manager	VOID				*firstspec;	// fŸr GERD	VOID				*firstmem;	// fŸr GERD	Handle				MoreMem;	// fŸr GERD	LONG				MaxHeight;	// maximale Windowhšhe in Pixeln	LONG				MaxWidth;	// maximale Windowbreite in Pixeln	ControlHandle		HSlider; 	// horizontaler Slider	ControlHandle		VSlider; 	// vertikaler Slider	LONG				ScrollH;	// Horzizontal eine Zeile scrollen	LONG				ScrollPageH;// Horzizontal eine Seite blŠttern	LONG				ScrollV;	// Vertikal eine Zeile scrollen	LONG				ScrollPageV;// Vertikal eine Seite blŠttern	LONG				Typ;		// Windowtyp	short				class;		// Windowklasse	short				counter;	// ZŠhler fŸr Reentrance bei WindowAktion	RgnHandle			saveClip;	// Clipping-Region des Windows	Boolean				RedrawFlag;	// true: erster Redraw erfolgt} WindStruct;typedef WindStruct	*WindPtr;enum {	noHSlider = 16,	// Window ohne H-Slider	noVSlider,		// Window ohne V-Slider	noSizer,		// Window ohne Sizer	noSmartSizer,	// kein Smart-Fuller (stets kompletter Redraw)	FloatWindow,	// Floating Window	DialogWindow,	// Window ist eine Dialogbox	NoParent,		// Window gehšrt zu KEINEM Dokument	MaxW,			// maximale Windowbreite fixieren	MaxH,			// maximale Windowhšhe fixieren	noShowWind,		// Window bei OpenWind noch nicht darstellen	TrueDialog,		// Window ist ein ÒechterÓ Mac-Dialog	DialogFilter,	// Dialogfilter (TastenkŸrzel, Default-Button) fŸr Dialog	noOrigin,		// keinen SetOrigin bei WindowAktion	InstantActive,	// System 7 Desktop-Window-Klick	NoAutoscroll,	// kein Scrollen im Window	NoHideFloat		// Float verschwindet nicht, wenn die Applikation im Hintergrund ist};/*** *	Defines fŸr Windows ***/#define ROFFSET			2		// Rand um das Window (Full und Tile)#define	SBarWidth		16		// Breite eines Sliders#define CTRL_HDEF		0#define CTRL_HMIN		0		// Default fŸr den horizontalen Slider#define CTRL_HMAX		299#define CTRL_VDEF		0#define CTRL_VMIN		0		// Default fŸr den vertikalen Slider#define CTRL_VMAX		299extern WindPtr		gMacWind;			// aktuelles Window bei Messageextern Boolean		gWindHilited;		// aktuelles Window aktiv? true = Ja!extern Boolean		gFirstWindowFlag;	// true, wenn ein Window zum ersten mal gešffnetextern WindPtr		gTopFloat;extern WindPtr		gTopWindow;typedef Boolean		(*WindCallbackProcPtr)(VOID);void	WindowInit(void);WindPtr	*GetWindowList(void);void	ForAllWindows(REG WindCallbackProcPtr funk,REG DocHandle d,REG short flag);Boolean	IsFloating(REG WindPtr w);Boolean	IsDialog(REG WindPtr w);Boolean	HideFloats(void);Boolean	ShowFloats(void);Boolean	Show2Floats(void);WindPtr	LastFloat(void);WindPtr	LastWindow(void);WindPtr	FirstVisibleWindow(Boolean flag);void	SelectWind(REG WindPtr w);void	ShowWind(WindPtr w);void	SelectTop(void);void	HideWind(WindPtr w);void	DragWind(REG WindPtr w,Point pnt,REG Rect *r);Boolean	WindowAktion3(REG WindPtr w,REG short offset,REG long (*param)(),long p2,long p3);void	WZoomClick(REG WindPtr w,short zoomDir);void	SetWindowTitle(REG WindPtr wind,Str255 title);WindPtr	OpenWind(long Type,Rect *r,Str255 title,short id,long w,long h);void	CloseWindAll(DocHandle d);void	WCloseClick(WindPtr wind);void	CloseWind(WindPtr wind);void	SizeWind(REG WindPtr wind,REG LONG w,REG LONG h,Boolean flag);Boolean	WUpdate(WindPtr wind);void	AdjustWindow(REG WindPtr wind);void	WGrowClick(REG WindPtr wind,Point p);void	WActivate(REG WindPtr wind,Boolean mode);void	WContentClick(REG WindPtr wind,Point thePoint);void	SetCValue(ControlHandle c,short value);void	SetSlider(ControlHandle c,long cur);void	FixScrollBars(WindPtr wind);#define WindowAktion(a,b,c) WindowAktion3(a,b,(void*)c,0L,0L)#define WCall(call)			WindowAktion3(FirstWindow(),-1,(long)call,0L,0L)#define WCall1(call,p1)		WindowAktion3(FirstWindow(),-1,(long)call,p1,0L)#define WCall2(call,p1,p2)	WindowAktion3(FirstWindow(),-1,(long)call,p1,p2)#define WINDOW(wind,funk,param)		WindowAktion(wind,OFFSET(WindStruct,funk),param)#define WFUNC(wind,funk,exefunk)	wind->funk = (ProcPtr)exefunk#define WADJUST(wind,exefunk)		wind->adjust = (ProcPtr)exefunk; AdjustWindow(w)#define STDFLOAT	((1L<<FloatWindow)|(1L<<noSizer)|(1L<<noHSlider)|(1L<<noVSlider)|0x800)#define STDDIALOG	(dBoxProc|(1L<<DialogWindow)|(1L<<noSizer)|(1L<<noHSlider)|(1L<<noVSlider)|(1L<<NoParent))#define TRUEDIALOG  (1L<<TrueDialog)#define	FULLER		8L#define ALLWELEMENT	(FULLER)