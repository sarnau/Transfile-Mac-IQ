#pragma once	// include this header				// only once per source filetypedef struct {	WORD	count;	WORD	delay;	LONG	data[];} acurRecord,*acurPtr,**acurHandle;extern RgnHandle	gUtilRgn;				// Dummy-Regionextern Rect			gDesktopRect;			// Rechteck des Desktopsextern Rect			gScreenRect;			// Rechteck des aktuellen Screensextern short		gMachineType;			// welcher Rechnerextern short		gSystemVersion;			// Versionsnummer vom Systemextern short		gQDVersion;				// Haupt-Quickdraw-Version:											//	0: originales QD											//	1: Color QD											//	2: 32-bit QDextern Boolean		gStandardFileFlag;		// StandardFile-Aufrufe vorhanden?extern Boolean		gFSSpecFlag;			// File Manager Routinen von System 7extern Boolean		gHasAppleEvents;		// AppleEvents vorhandenextern Boolean		gHasWaitNextEvent;		// true, wenn WaitNextEvent() vorhandenextern Boolean		gHasAlias;				// true, wenn Alias vorhandenextern Boolean		gHasFindFolder;			// true, wenn FindFolder vorhandenextern Boolean		gHasHelpMgr;			// true, wenn Help Manager vorhandenextern Boolean		gCTB;					// true, wenn Communication Toolbox vorhandenextern Boolean		gVirtMem;				// true, wenn virtueller Speicher vorhanden istextern short		gScriptMgrVersion;		// Versionsnummer des aktiven Script-Managersextern short		gAppResRef;				// refNum der eigenen Resource-Dateiextern Boolean		gAppTrue;				// true, wenn ECHTE Stand-Alone-Applikationextern Boolean		gInBackground;			// true, wenn Applikation im Hintergrundextern Str255		gAppName;				// Name der Applikationextern OSType		gSignature;				// Signatur der Applikationextern WORD			gCurrentCursor;			// aktueller Cursorextern acurHandle	gCurrentCursorH;		// aktuelle acur-Handleextern WORD			gCurrentCursorIndex;	// Index auf die acur-Handleextern LONG			gCurrentCursorTime;		// acur-Timervoid		SetMinimumStack(long minSize);short		NumToolboxTraps(void);TrapType	GetTrapType(short theTrap);Boolean		TrapAvailable(REG short theTrap);long		GetGestaltResult(OSType gestaltSelector);Handle		GetAppIndResource(ResType theType,short index,OSErr *err);Handle		GetAppResource(ResType theType,short index,OSErr *err);VOID		DoSetCursor(REG WORD id);VOID		FetchCursor(REG WORD id);void		pfeil(void);void		hand(void);void		fourpfeil(void);void		finger(void);void		fkreuz(void);void		biene(void);void		textmaus(void);void		floppy(void);Point		GetGlobalMouse(void);void		GlobalToLocalRect(Rect *aRect);void		LocalToGlobalRect(REG Rect *aRect);UCHAR		MapKey(UWORD keyInfo);Boolean		UserAbort(VOID);OSErr		Return(...);void		InitAll(void);#define kExtremeNeg				(-32768)	/* kExtremeNeg and kExtremePos are used to set											   up wide open rectangles and regions. */#define kExtremePos				(32767 - 1)	/* required to address an old region bug */	#define kDITop					0x0050		/* kTopLeft - for positioning the Disk											   Initialization dialogs. */#define kDILeft					0x0070#define kScrollbarWidth			16			/* kScrollBarWidth can be used in											   calculating values for control											   positioning and sizing.*/#define kScrollbarAdjust		(kScrollbarWidth - 1)/*** *	Global constants ***/#define	kNoEvents				0			/* no events mask */enum { kQDOriginal = 0, kQD8Bit, kQD32Bit };	/* For use with gQDVersion *//*** *	Types ***/typedef short *IntegerPtr, **IntegerHandle;typedef long *LongintPtr, **LongintHandle;typedef Boolean *BooleanPtr, **BooleanHandle;#if 0struct	WindowTemplate	{					/* template to a WIND resource */	Rect	boundsRect;	short	procID;	Boolean	visible;	Boolean	filler1;	Boolean	goAwayFlag;	Boolean	filler2;	long	refCon;	Str255	title;};typedef	struct	WindowTemplate	WindowTemplate;typedef			WindowTemplate	*WindowTPtr, **WindowTHndl;typedef Rect (*PositionWndProcPtr)(WindowPtr window, WindowPtr relatedWindow);#endif